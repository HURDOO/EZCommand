package kr.kro.ezcommand.ui.fxml;

import javafx.application.Platform;
import javafx.css.PseudoClass;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.*;
import javafx.scene.web.WebView;
import kr.kro.ezcommand.Main;
import kr.kro.ezcommand.engine.parser.type.rjtf.JsonText;
import kr.kro.ezcommand.engine.parser.type.rjtf.RawJsonTextFormat;
import org.json.simple.JSONObject;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

public class RJTFTextEditorController implements Initializable {

    @FXML Button bold;
    @FXML Button italic;
    @FXML Button underlined;
    @FXML Button strikethrough;
    @FXML Button obfuscated;
    @FXML ColorPicker color;
    @FXML Button clickEvent;
    @FXML Button hoverEvent;

    @FXML HBox texts;
    @FXML WebView web;

    private PseudoClass boldClass = PseudoClass.getPseudoClass("bold");
    private PseudoClass italicClass = PseudoClass.getPseudoClass("italic");
    private PseudoClass underlinedClass = PseudoClass.getPseudoClass("underlined");
    private PseudoClass strikethroughClass = PseudoClass.getPseudoClass("strikethrough");

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        web.getEngine().load(RJTFTextEditorController.class.getResource("/ckeditor5-build-classic/index.html").toString());

        texts.setOnMouseClicked(event -> {
            updateTexts();
            endTextField();
        });

        bold.setOnAction(event -> {
            JsonText text = now.getContent().get(nowIndex);
            text.setBold(!text.isBold());
            textFieldUpdate();
        });

        italic.setOnAction(event -> {
            JsonText text = now.getContent().get(nowIndex);
            text.setItalic(!text.isItalic());
            textFieldUpdate();
        });

        underlined.setOnAction(event -> {
            nowJsonText.setUnderlined(!nowJsonText.isUnderlined());
            textFieldUpdate();
        });

        strikethrough.setOnAction(event -> {
            nowJsonText.setStrikethrough(!nowJsonText.isStrikethrough());
            textFieldUpdate();
        });

        obfuscated.setOnAction(event -> {
            nowJsonText.setObfuscated(!nowJsonText.isObfuscated());
            textFieldUpdate();
        });
    }

    private RawJsonTextFormat now = null;
    private JsonText nowJsonText = null;
    private TextField nowTextField = null;
    private int nowIndex = -1;

    public void createNewWindow(RawJsonTextFormat rjtf) {
        now = rjtf;
        updateTexts();
    }

    public void runClosing() {
        now.updateTexts();
        now = null;
        endTextField();
    }

    public void updateTexts() {
        texts.getChildren().clear();
        // /src/main/resources/css/RawJsonTextFormat.css
        // Text에 css 파일 적용하는 방법 찾아야함.

        for(int i=0;i<now.getContent().size();i++) {

            Text text = new Text();
            JsonText json = now.getContent().get(i);

            //label.getStylesheets().add("/src/main/resources/css/RawJsonTextFormat.css");
            //text.getStyleClass().addAll("label","bold", "italic", "underlined", "strikethrough");
            /*if(json.isBold())
            {
                if(json.isItalic()) text.setId("bold_italic");
                else text.setId("isbold");
            }
            else if(json.isItalic()) text.setId("isitalic");
            else text.setId("normal");*/

            text.setFont(Font.font(Main.BMJUA.getFamily(), FontWeight.BOLD, FontPosture.ITALIC, 48));

            //accessibleRole이 적용 안됨.


            text.setText(json.getText());
            if (json.getColor() != Color.TRANSPARENT)
                text.setStyle("-fx-font-color: " + json.getColor().toString() + ";");

            text.pseudoClassStateChanged(boldClass, json.isBold());
            text.pseudoClassStateChanged(italicClass, json.isItalic());
            text.pseudoClassStateChanged(underlinedClass, json.isUnderlined());
            text.pseudoClassStateChanged(strikethroughClass, json.isStrikethrough());

            if (json.isObfuscated()) {
                text.setText("#".repeat(json.getText().length()));
            }

            text.setOnMouseClicked(event -> {
                endTextField();
                nowIndex = texts.getChildren().indexOf(text);
                nowJsonText = now.getContent().get(nowIndex);

                nowTextField = new TextField();
                textFieldUpdate();

                nowTextField.textProperty().addListener((observable, oldValue, newValue) -> {
                    nowJsonText.setText(newValue);
                    textFieldResize();
                });

                texts.getChildren().set(nowIndex, nowTextField);
                event.consume();
            });
            texts.getChildren().add(text);
        }
    }

    private void textFieldUpdate() {
        nowTextField.setText(nowJsonText.getText());
        if(nowJsonText.getColor() != Color.TRANSPARENT)
            nowTextField.setStyle("-fx-text-color: " + nowJsonText.getColor().toString() + ";");

        nowTextField.pseudoClassStateChanged(boldClass, nowJsonText.isBold());
        nowTextField.pseudoClassStateChanged(italicClass, nowJsonText.isItalic());
        nowTextField.pseudoClassStateChanged(underlinedClass, nowJsonText.isUnderlined());
        nowTextField.pseudoClassStateChanged(strikethroughClass, nowJsonText.isStrikethrough());

        textFieldResize();
    }

    private void endTextField() {
        nowTextField = null;
        nowJsonText = null;
        nowIndex = -1;
    }

    private void textFieldResize()
    {
        Platform.runLater(() -> {
            Text text = new Text(nowTextField.getText());
            text.setFont(nowTextField.getFont()); // Set the same font, so the size is the same
            double width = text.getLayoutBounds().getWidth() // This big is the Text in the TextField
                    + nowTextField.getPadding().getLeft() + nowTextField.getPadding().getRight() // Add the padding of the TextField
                    + 2d; // Add some spacing
            nowTextField.setPrefWidth(width); // Set the width
            nowTextField.positionCaret(nowTextField.getCaretPosition()); // If you remove this line, it flashes a little bit
        });

        // https://stackoverflow.com/questions/12737829/javafx-textfield-resize-to-text-length
    }
}
/*
public void updateTexts(List<JsonText> textList) {
        for(int i=0;i<textList.size();i++)
        {
            texts.getChildren().clear();
            JSONObject object = textList.get(i).toJson();
            Label text = new Label();
            text.getStylesheets().add("/src/main/resources/css/RawJsonTextFormat.css");
            text.getStyleClass().addAll("bold","italic","underlined","strikethrough");

            if(object.get("text") != null) {
                text.setText(object.get("text").toString());
            }
            if(object.get("color") != null) {
                text.setStyle("-fx-font-color: " + object.get("color").toString() + ";");
            }
            try {
                boolean bool = (boolean) object.get("bold");
                text.pseudoClassStateChanged(boldClass, bool);
            } catch (NullPointerException e) {
                text.pseudoClassStateChanged(boldClass, false);
            }
            try {
                boolean bool = (boolean) object.get("italic");
                text.pseudoClassStateChanged(italicClass, bool);
            } catch (NullPointerException e) {
                text.pseudoClassStateChanged(italicClass, false);
            }
            try {
                boolean bool = (boolean) object.get("underlined");
                text.pseudoClassStateChanged(underlinedClass, bool);
            } catch (NullPointerException e) {
                text.pseudoClassStateChanged(underlinedClass, false);
            }
            try {
                boolean bool = (boolean) object.get("strikethrough");
                text.pseudoClassStateChanged(strikethroughClass, bool);
            } catch (NullPointerException e) {
                text.pseudoClassStateChanged(strikethroughClass, false);
            }

            texts.getChildren().add(text);
            int ii = i;
            text.setOnMouseClicked(event -> {
                TextField textField = new TextField();
                texts.getChildren().set(ii,textField);
                textField.setStyle(text.getStyle());
                textField.getStylesheets().add("/src/main/resources/css/RawJsonTextFormat.css");
                for(int j=1;j<text.getStyleClass().size();j++) {
                    textField.getStyleClass().add(text.getStyleClass().get(j));
                }
                for(int j=1;j<text.getPseudoClassStates().size();j++) {

                }
            });
        }
    }
 */